//
//  StudentLocation.swift
//  On the Map
//
//  Created by Ivan Magda on 21.03.16.
//  Copyright Â© 2016 Ivan Magda. All rights reserved.
//

import Foundation

//------------------------------------
// MARK: - StudentLocation
//------------------------------------

struct StudentLocation {
    
    //------------------------------------
    // MARK: Properties
    //------------------------------------
    
    /// An auto-generated id/key generated by Parse which uniquely identifies a StudentLocation.
    let objectId: String
    
    /// Extra (optional) key used to uniquely identify a StudentLocation.
    let uniqueKey: String
    
    /// The first name of the student which matches their Udacity profile first name.
    let firstName: String
    
    /// The last name of the student which matches their Udacity profile last name.
    let lastName: String
    
    /// The location string used for geocoding the student location.
    let mapString: String
    
    /// The URL provided by the student.
    let mediaURL: NSURL
    
    /// The student location.
    let location: GeoLocation
    
    /// The date when the student location was created.
    let createdAt: String
    
    /// The date when the student location was last updated.
    let updatedAt: String
    
    //------------------------------------
    // MARK: Initializers
    //------------------------------------
    
    init(objectId: String, uniqueKey: String, firstName: String, lastName: String, mapString: String,
        mediaURL: NSURL, location: GeoLocation, createdAt: String, updatedAt: String) {
            self.objectId  = objectId
            self.uniqueKey = uniqueKey
            self.firstName = firstName
            self.lastName  = lastName
            self.mapString = mapString
            self.mediaURL  = mediaURL
            self.location = location
            self.createdAt = createdAt
            self.updatedAt = updatedAt
    }
    
    init?(dict: [String: AnyObject]) {
        guard
            let objectId = JSON.string(dict, key: StudentLocationKey.ObjectId.rawValue),
            let uniqueKey = JSON.string(dict, key: StudentLocationKey.UniqueKey.rawValue),
            let firstName = JSON.string(dict, key: StudentLocationKey.FirstName.rawValue),
            let lastName = JSON.string(dict, key: StudentLocationKey.LastName.rawValue),
            let mapString = JSON.string(dict, key: StudentLocationKey.MapString.rawValue),
            let mediaURLString = JSON.string(dict, key: StudentLocationKey.MediaURL.rawValue),
            let mediaURL = NSURL(string: mediaURLString),
            let latitude = JSON.double(dict, key: StudentLocationKey.Latitude.rawValue),
            let longitude = JSON.double(dict, key: StudentLocationKey.Longitude.rawValue),
            let createdAt = JSON.string(dict, key: StudentLocationKey.CreatedAt.rawValue),
            let updatedAt = JSON.string(dict, key: StudentLocationKey.UpdatedAt.rawValue) else {
                return nil
        }
        
        self.objectId = objectId
        self.uniqueKey = uniqueKey
        self.firstName = firstName
        self.lastName = lastName
        self.mapString = mapString
        self.mediaURL = mediaURL
        self.location = GeoLocation(latitude: latitude, longitude: longitude)
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }
    
    //------------------------------------
    // MARK: Methods
    //------------------------------------
    
    static func sanitizedStudentLocations(dicts: [JSONDictionary]?) -> [StudentLocation]? {
        guard let dicts = dicts else {
            return nil
        }
        
        return dicts.flatMap { StudentLocation.decode($0) }
    }
    
}

//-----------------------------------------
// MARK: - StudentLocation: JSONParselable
//-----------------------------------------

extension StudentLocation: JSONParselable {
    
    static func decode(json: JSONDictionary) -> StudentLocation? {
        return self.init(dict: json)
    }
    
}
